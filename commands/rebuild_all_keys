#!/usr/bin/env bash
if test "$BASH" = "" || "$BASH" -uc 'a=();true "${a[@]}"' 2>/dev/null; then
    # Bash 4.4, Zsh
    set -euo pipefail
else
    # Bash 4.3 and older chokes on empty arrays with set -u.
    set -eo pipefail
fi
shopt -s nullglob globstar

declare -A F_OPTIONS

F_OPTIONS["user"]="$(whoami)"
F_OPTIONS["keypath"]="${HOME}/.ssh"
F_OPTIONS["additionalkeypath"]="${F_OPTIONS[keypath]}/additional_keys"
F_OPTIONS["backuppath"]="${F_OPTIONS[keypath]}/backups"
F_OPTIONS["tmppath"]="${F_OPTIONS[keypath]}/tmp"
F_OPTIONS["keyfile"]="${F_OPTIONS[keypath]}/test_authorized_keys"
F_OPTIONS["skelpath"]="/etc/skel"
F_OPTIONS["masterkeys"]="https://two.frame.hosting/_authkeys"

if [ -z "${FST_USER_DIR+x}" ];
  then FST_USER_DIR="/srv/users";
fi

function do_setup {

  if [[ "root" == "${FST_ORIGINAL_USER}" ]]; then
    output "Do not run this script as root"
    exit 1
  fi

  if [[ "frame" != "${FST_ORIGINAL_USER}" && "dev" != "${FST_ORIGINAL_USER}" ]]; then
      output "This script must be run as 'frame' user with sudo priviledges"
      exit 1
  fi

  if [[ !( -d "${F_OPTIONS[keypath]}") ]]; then
    output "${F_OPTIONS[keypath]} does not exist.."
    exit 1;
  fi;

  if [[ "frame" == "${FST_ORIGINAL_USER}" ]]; then
    ## Fix for early config frame servers
    sudo chown -R frame:frame "${F_OPTIONS[keypath]}"
  fi

  if [[ "dev" == "${FST_ORIGINAL_USER}" ]]; then

    output "setting up temp path and dir"

    FST_USER_DIR="/Users/dev/tmp/serverpilot-mock"

    mkdir -p "${FST_USER_DIR}"
  fi

  if [[ ! ( -f "${F_OPTIONS[keyfile]}") ]]; then
    output "authorized_keys does not exists, creating....how are you here?"
    touch "${F_OPTIONS[keyfile]}"
  fi;

  output "making tmp dir....."

  mkdir -p "${F_OPTIONS[tmppath]}"


  output "setup complete..."
}

function rebuild_users_keys {

    local users=$( ls $FST_USER_DIR)

    if [ -z "$users" ]; then
        output "No users found matching that pattern"
        return 0
    fi

      echo "${FST_OUT_GREEN}${FST_OUT_BLOCK}"
      output "REBUILD ALL USER KEYS"
      echo "${FST_OUT_GREEN}${FST_OUT_BLOCK}"

    for U in ${users[@]}; do

         output::sep

         output "Beginning key rebuild for user: ${U}"

         FST_run_as "${U}" "rebuild_keys"

         output::sep

    done

}

function rebuild_skel_keys {

      echo "${FST_OUT_GREEN}${FST_OUT_BLOCK}"
      output "REBUILD SKEL KEYS"
      echo "${FST_OUT_GREEN}${FST_OUT_BLOCK}"

      FST_run_as "root" "rebuild_skel_keys"

     

}
function cleanup {

  if [[ ! ( -z "${F_OPTIONS[tmppath]}") ]]; then

    output "Removing tmp files"..

    rm -rf "${F_OPTIONS[tmppath]}";

  fi

}

function FST_RUN_SELF {

  do_setup;

  rebuild_skel_keys;

  rebuild_users_keys;


}


function FST_CLEANUP_SELF {
    cleanup;
}
