#!/usr/bin/env bash
if test "$BASH" = "" || "$BASH" -uc 'a=();true "${a[@]}"' 2>/dev/null; then
    # Bash 4.4, Zsh
    set -euo pipefail
else
    # Bash 4.3 and older chokes on empty arrays with set -u.
    set -eo pipefail
fi
shopt -s nullglob globstar

function FST_find_self {
  local SOURCE="${BASH_SOURCE[0]}"
  while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  done
  echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"
}


#
# Script Entry Point
#
#

export FST_VERSION="1.1.1";
export FST_BASEPATH="$(FST_find_self)"
export FST_UTILPATH="${FST_BASEPATH}/utils"
export FST_COMMANDPATH="${FST_BASEPATH}/commands"

FST_OUTPUT_LEVEL=1
FST_LOG_LEVEL=1
FST_DEBUG="false"
FST_ORIGINAL_USER="$(whoami)"
FST_CURRENT_COMMAND=""
FST_DRY="true"

## Provision to move config into server specific files 

if [ -f "${FST_BASEPATH}/../frame.${FST_VERSION}.conf" ]; then
  source "${FST_BASEPATH}/../frame.${FST_VERSION}.conf"
elif [ -f "${FST_BASEPATH}/../frame.conf" ]; then
  source "${FST_BASEPATH}/../frame.conf"
fi

## Load utility files and common functions

for file in $( ls -1 "${FST_BASEPATH}/utils" ); do
  source "${FST_BASEPATH}/utils/${file}"
done;

## parse options and set global flags, removing them from the args
## IMPORTANT - Don't quote the variable here...
FST_parse_global_opts "$@"
set -- $FST_PARSED_ARGS

## Check the command exists

FST_command_check "$1";

## If the above command didn't error out, then we're good to go
## remove the first positional as it's the command name

FST_CURRENT_COMMAND="$1"

shift

source "${FST_COMMAND}"

## Trap any command with our cleanup function - can be more developed later

trap FST_cleanup EXIT;

## Time to run the command
FST_RUN_SELF "$@"
